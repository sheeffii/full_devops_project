name: CI - Build, Plan, and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_packer:
    name: Build AMI with Packer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: 1.8.6

      - name: Packer init & build
        run: |
          cd infrastructure/packer
          packer init .
          packer build -force packer-docker-ami.pkr.hcl

      - name: Upload packer manifest
        uses: actions/upload-artifact@v3
        with:
          name: packer-manifest
          path: infrastructure/packer/packer-manifest.json

  plan:
    name: Terraform Plan
    needs: build_packer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download packer manifest
        uses: actions/download-artifact@v3
        with:
          name: packer-manifest
          path: infrastructure/packer

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap Backend
        run: |
          cd infrastructure/bootstrap
          terraform init -reconfigure
          terraform apply -auto-approve
          echo "bucket=$(terraform output -raw terraform_state_bucket)" >> $GITHUB_ENV
          echo "table=$(terraform output -raw terraform_lock_table)" >> $GITHUB_ENV

      - name: Terraform Plan
        run: |
          cd infrastructure/dev
          terraform init -reconfigure \
            -backend-config="bucket=${{ env.bucket }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="region=eu-central-1" \
            -backend-config="dynamodb_table=${{ env.table }}"
          terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: infrastructure/dev/tfplan
          retention-days: 1

  apply:
    name: Terraform Apply
    needs: plan
    runs-on: ubuntu-latest
    environment: production  # This enables manual approval
    steps:
      - uses: actions/checkout@v3
      
      - name: Download packer manifest
        uses: actions/download-artifact@v3
        with:
          name: packer-manifest
          path: infrastructure/packer

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: infrastructure/dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap Backend
        run: |
          cd infrastructure/bootstrap
          terraform init -reconfigure
          terraform apply -auto-approve
          echo "bucket=$(terraform output -raw terraform_state_bucket)" >> $GITHUB_ENV
          echo "table=$(terraform output -raw terraform_lock_table)" >> $GITHUB_ENV

      - name: Terraform Apply
        run: |
          cd infrastructure/dev
          terraform init -reconfigure \
            -backend-config="bucket=${{ env.bucket }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="region=eu-central-1" \
            -backend-config="dynamodb_table=${{ env.table }}"
          terraform apply tfplan
          cd infrastructure/dev
          terraform init -reconfigure -backend-config="bucket=${{ steps.backend.outputs.bucket }}" -backend-config="key=dev/terraform.tfstate" -backend-config="region=eu-north-1" -backend-config="dynamodb_table=${{ steps.backend.outputs.table }}"
          terraform apply -var-file=ci.tfvars -auto-approve
