# Terraform files
*.tfstate
*.tfstate.*
!example.tfvars
.terraform/
.terraform.lock.hcl
crash.log
crash.*.log
override.tf
override.tf.json
*_override.tf
*_override.tf.json
# CLI configuration
.terraform/

# SSH Keys
*.pem
*.key
*.pub
id_rsa*
id_ed25519*

# Packer
packer_cache/
*.pkrvars.hcl
*.box

# Environment files
.env
.env.*
*.env

# Local .terraform directories
**/.terraform/*

# Local development
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Logs
*.log
logs/
tfplan
plan.out
plan.json

# Secrets
secrets.tfvars
secrets.auto.tfvars
*.secrets.*
aws_credentials
credentials.json

# Backup files
*.bak
*.backup
*~

# State files directory
terraform.tfstate.d/


# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc